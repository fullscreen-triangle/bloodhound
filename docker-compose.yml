# Bloodhound Virtual Machine - Development Stack
# Consciousness-Aware Scientific Computing Platform

version: '3.8'

services:
  # === Core Bloodhound VM ===
  bloodhound-vm:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
        VERSION: ${VERSION:-0.1.0}
    container_name: bloodhound-vm-core
    hostname: bloodhound-vm
    ports:
      - "8080:8080"     # Main VM interface
      - "9090:9090"     # Metrics and monitoring
      - "9091:9091"     # Consciousness monitoring
      - "3000:3000"     # Web dashboard
    volumes:
      - vm_data:/app/data
      - vm_logs:/app/logs
      - vm_config:/app/config
      - ./config:/app/config/local:ro
      - ./data/samples:/app/data/samples:ro
    environment:
      # Core VM Configuration
      CONSCIOUSNESS_LEVEL: "full"
      S_ENTROPY_NAVIGATION: "true"
      PURPOSE_FRAMEWORK: "enabled"
      COMBINE_HARVESTER: "enabled"
      FEMTOSECOND_PROCESSORS: "true"
      
      # Performance Settings
      RAYON_NUM_THREADS: "0"
      TOKIO_WORKER_THREADS: "0"
      
      # Logging
      RUST_LOG: "debug"
      RUST_BACKTRACE: "full"
      
      # Database
      DATABASE_URL: "postgresql://bloodhound:consciousness@postgres:5432/bloodhound_vm"
      REDIS_URL: "redis://redis:6379"
      
      # Monitoring
      PROMETHEUS_URL: "http://prometheus:9090"
      GRAFANA_URL: "http://grafana:3001"
    depends_on:
      - postgres
      - redis
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'

  # === Database ===
  postgres:
    image: postgres:15-alpine
    container_name: bloodhound-postgres
    environment:
      POSTGRES_DB: bloodhound_vm
      POSTGRES_USER: bloodhound
      POSTGRES_PASSWORD: consciousness
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./sql/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bloodhound -d bloodhound_vm"]
      interval: 10s
      timeout: 5s
      retries: 5

  # === Redis Cache ===
  redis:
    image: redis:7-alpine
    container_name: bloodhound-redis
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # === Monitoring Stack ===
  prometheus:
    image: prom/prometheus:latest
    container_name: bloodhound-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: bloodhound-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: consciousness
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: "grafana-piechart-panel,grafana-worldmap-panel"
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped

  # === Development Tools ===
  jupyter:
    build:
      context: ./jupyter
      dockerfile: Dockerfile
    container_name: bloodhound-jupyter
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: "consciousness"
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - vm_data:/home/jovyan/data:ro
      - vm_logs:/home/jovyan/logs:ro
    depends_on:
      - bloodhound-vm
    restart: unless-stopped

  # === MinIO for S3-compatible storage ===
  minio:
    image: minio/minio:latest
    container_name: bloodhound-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: bloodhound
      MINIO_ROOT_PASSWORD: consciousness123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # === Elasticsearch for logs ===
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: bloodhound-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped

  # === Kibana for log visualization ===
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: bloodhound-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # === API Gateway ===
  nginx:
    image: nginx:alpine
    container_name: bloodhound-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    depends_on:
      - bloodhound-vm
      - grafana
      - jupyter
    restart: unless-stopped

  # === Message Queue ===
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: bloodhound-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: bloodhound
      RABBITMQ_DEFAULT_PASS: consciousness
    ports:
      - "5672:5672"     # AMQP port
      - "15672:15672"   # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped

  # === Vector Database for embeddings ===
  qdrant:
    image: qdrant/qdrant:latest
    container_name: bloodhound-qdrant
    ports:
      - "6333:6333"     # REST API
      - "6334:6334"     # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    restart: unless-stopped

# === Named Volumes ===
volumes:
  vm_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/vm
  
  vm_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  
  vm_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./config
  
  postgres_data:
    driver: local
  
  redis_data:
    driver: local
  
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local
  
  minio_data:
    driver: local
  
  elasticsearch_data:
    driver: local
  
  rabbitmq_data:
    driver: local
  
  qdrant_data:
    driver: local

# === Networks ===
networks:
  default:
    name: bloodhound-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# === Extensions for development ===
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# Apply logging to all services
services:
  bloodhound-vm:
    logging: *default-logging
  postgres:
    logging: *default-logging
  redis:
    logging: *default-logging
  prometheus:
    logging: *default-logging
  grafana:
    logging: *default-logging
  jupyter:
    logging: *default-logging
  minio:
    logging: *default-logging
  elasticsearch:
    logging: *default-logging
  kibana:
    logging: *default-logging
  nginx:
    logging: *default-logging
  rabbitmq:
    logging: *default-logging
  qdrant:
    logging: *default-logging