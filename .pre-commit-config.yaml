# Pre-commit configuration for Bloodhound Virtual Machine
# Consciousness-Aware Scientific Computing Platform

repos:
  # === General Purpose Hooks ===
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
        exclude: '\.ipynb$'
      - id: check-yaml
        args: [--multi]
      - id: check-toml
      - id: check-json
        exclude: '\.ipynb$'
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: [--pytest-test-first]
      - id: requirements-txt-fixer
      - id: mixed-line-ending
        args: [--fix=lf]
      - id: pretty-format-json
        args: [--autofix, --no-sort-keys]
        exclude: '\.ipynb$'

  # === Rust Formatting and Linting ===
  - repo: https://github.com/doublify/pre-commit-rust
    rev: v1.0
    hooks:
      - id: fmt
        name: Rust Format
        description: Format Rust code with rustfmt
        entry: rustfmt
        language: system
        files: \.rs$
        args: [--edition, "2021"]
      
      - id: clippy
        name: Rust Clippy
        description: Lint Rust code with clippy
        entry: cargo
        language: system
        args: [clippy, --all-targets, --all-features, --, -D, warnings]
        files: \.rs$
        pass_filenames: false

  # === Python Formatting and Linting ===
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        name: Python Black Formatter
        description: Format Python code with Black
        language_version: python3
        args: [--line-length=88]

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        name: Python Import Sorter
        description: Sort Python imports with isort
        args: [--profile, black, --line-length=88]

  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        name: Python Flake8 Linter
        description: Lint Python code with flake8
        additional_dependencies:
          - flake8-docstrings
          - flake8-typing-imports
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify
        args: [--max-line-length=88, --extend-ignore=E203,W503]

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        name: Python Type Checker
        description: Check Python types with mypy
        additional_dependencies:
          - types-requests
          - types-PyYAML
          - types-toml
        args: [--ignore-missing-imports, --disallow-untyped-defs]

  # === Security Checks ===
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: Python Security Scanner
        description: Scan Python code for security issues
        args: [-r, ., -f, json, -o, bandit-report.json]
        exclude: tests/

  - repo: https://github.com/gitguardian/ggshield
    rev: v1.25.0
    hooks:
      - id: ggshield
        name: GitGuardian Security Scanner
        description: Scan for secrets and security vulnerabilities
        language: python
        stages: [commit]

  # === Documentation ===
  - repo: https://github.com/myint/docformatter
    rev: v1.7.5
    hooks:
      - id: docformatter
        name: Python Docstring Formatter
        description: Format Python docstrings
        args: [--in-place, --wrap-summaries=88, --wrap-descriptions=88]

  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        name: Python Docstring Checker
        description: Check Python docstring conventions
        args: [--convention=google]

  # === Markdown and Documentation ===
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        name: Markdown Linter
        description: Lint Markdown files
        args: [--fix]
        exclude: 'docs/virtual-machine/.*\.md$'  # Exclude our scientific docs

  # === YAML Formatting ===
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        name: Prettier Formatter
        description: Format YAML, JSON, and other files
        types_or: [yaml, json]
        exclude: '\.ipynb$'

  # === Shell Script Linting ===
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: Shell Script Linter
        description: Lint shell scripts with shellcheck

  # === Docker ===
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: Dockerfile Linter
        description: Lint Dockerfile with hadolint

  # === Configuration File Validation ===
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.33.0
    hooks:
      - id: yamllint
        name: YAML Linter
        description: Lint YAML files
        args: [-d, relaxed]

  # === License and Copyright ===
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.4
    hooks:
      - id: insert-license
        name: Insert License Header
        files: \.rs$
        args:
          - --license-filepath
          - LICENSE_HEADER.txt
          - --comment-style
          - //

  # === Rust-specific Security and Quality ===
  - repo: local
    hooks:
      - id: cargo-check
        name: Cargo Check
        description: Check Rust code compilation
        entry: cargo
        language: system
        args: [check, --all-targets, --all-features]
        files: \.rs$
        pass_filenames: false

      - id: cargo-test
        name: Cargo Test
        description: Run Rust unit tests
        entry: cargo
        language: system
        args: [test, --lib, --all-features]
        files: \.rs$
        pass_filenames: false

      - id: cargo-audit
        name: Cargo Security Audit
        description: Audit Rust dependencies for security vulnerabilities
        entry: cargo
        language: system
        args: [audit]
        files: Cargo\.(toml|lock)
        pass_filenames: false

  # === Python-specific Quality Checks ===
  - repo: local
    hooks:
      - id: python-safety
        name: Python Safety Check
        description: Check Python dependencies for security vulnerabilities
        entry: safety
        language: python
        args: [check, --json, --output, safety-report.json]
        files: requirements.*\.txt$
        pass_filenames: false

      - id: pytest-unit
        name: Python Unit Tests
        description: Run Python unit tests
        entry: python
        language: system
        args: [-m, pytest, python/tests/, -x, -v, --tb=short]
        files: \.py$
        pass_filenames: false

  # === Consciousness-Aware VM Specific Checks ===
  - repo: local
    hooks:
      - id: consciousness-validation
        name: Consciousness Logic Validation
        description: Validate consciousness-level processing logic
        entry: python
        language: system
        args: [scripts/validate_consciousness_logic.py]
        files: (consciousness|bmd|frame_selection).*\.py$
        pass_filenames: false

      - id: s-entropy-validation
        name: S-Entropy Mathematics Validation
        description: Validate S-entropy navigation mathematics
        entry: python
        language: system
        args: [scripts/validate_s_entropy_math.py]
        files: (s_entropy|navigation|coordinate).*\.(py|rs)$
        pass_filenames: false

      - id: purpose-framework-validation
        name: Purpose Framework Validation
        description: Validate Purpose Framework domain learning logic
        entry: python
        language: system
        args: [scripts/validate_purpose_framework.py]
        files: (purpose|domain|learning|lora).*\.(py|rs)$
        pass_filenames: false

      - id: combine-harvester-validation
        name: Combine Harvester Validation
        description: Validate Combine Harvester integration logic
        entry: python
        language: system
        args: [scripts/validate_combine_harvester.py]
        files: (combine|harvester|integration|synthesis).*\.(py|rs)$
        pass_filenames: false

      - id: scientific-correctness
        name: Scientific Correctness Check
        description: Validate scientific computation correctness
        entry: python
        language: system
        args: [scripts/validate_scientific_correctness.py]
        files: (genomics|proteomics|metabolomics|bioinformatics).*\.(py|rs)$
        pass_filenames: false

  # === Configuration Validation ===
  - repo: local
    hooks:
      - id: bloodhound-config-validation
        name: Bloodhound Configuration Validation
        description: Validate Bloodhound VM configuration
        entry: python
        language: system
        args: [scripts/validate_bloodhound_config.py]
        files: bloodhound.*\.toml$
        pass_filenames: false

      - id: docker-compose-validation
        name: Docker Compose Validation
        description: Validate Docker Compose configuration
        entry: docker-compose
        language: system
        args: [config, -q]
        files: docker-compose.*\.yml$
        pass_filenames: false

# Pre-commit configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [cargo-audit, python-safety, pytest-unit]  # Skip slow hooks in CI
  submodules: false

# Default language version
default_language_version:
  python: python3.11
  rust: '1.70'

# Exclude patterns
exclude: |
  (?x)^(
    \.git/.*|
    \.venv/.*|
    venv/.*|
    target/.*|
    build/.*|
    dist/.*|
    .*\.egg-info/.*|
    __pycache__/.*|
    \.pytest_cache/.*|
    \.mypy_cache/.*|
    \.coverage.*|
    htmlcov/.*|
    \.ipynb_checkpoints/.*|
    docs/_build/.*|
    models/.*\.bin|
    models/.*\.onnx|
    data/.*|
    logs/.*|
    .*\.log|
    .*\.bak|
    .*\.backup
  )$

# Minimum pre-commit version
minimum_pre_commit_version: 3.5.0